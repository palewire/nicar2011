<pre><code> ______  _____  ______  ______   ______    2011
| |  \ \  | |  | |     | |  | | | |  | \       
| |  | |  | |  | |     | |__| | | |__| |       
|_|  |_| _|_|_ |_|____ |_|  |_| |_|  \_\       </code></pre>

A example Django app, by "Aron Pilhofer":http://github.com/pilhofer.

h3. Instructions

*Create your Django project*

<pre><code>$ django-admin.py startproject nicar2011</code></pre>

*Start it up for the first time*

<pre><code>$ cd nicar2011
$ python manage.py runserver</code></pre>

*Set your database connection and syncdb*

In settings.py...

<pre><code>DATABASE_ENGINE = 'sqlite3'
DATABASE_NAME = 'nicar2011.db'</code></pre>

Then back on the shell...

<pre><code>$ python manage.py syncdb</code></pre>

*Create an application, call it polls*

<pre><code>$ python manage.py startapp polls</code></pre>

*Define two models in models.py*

<pre><code>class Project(models.Model):
    title = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    active_flag = models.BooleanField()

class Vote(models.Model):
    project = models.ForeignKey(Project)
    choice = models.IntegerField()
    </code></pre>

*Add line to settings.py as an installed app*

<pre><code>'polls',</code></pre>

*Sync your db again*

<pre><code>$ python manage.py syncdb</code></pre>

*Add a string representation of your object to the model Project in models.py*

<pre><code>def __unicode__(self):
    return self.title</code></pre>

*Add your app to settings.py in INSTALLED_APPS*

<pre><code>'django.contrib.admin',</code></pre>

*Sync db to create admin tables*

<pre><code>$ python manage.py syncdb</code></pre>

*Enable admin. in urls.py by uncommenting the following*

<pre><code>from django.contrib import admin
admin.autodiscover()</code></pre>

...and...

<pre><code>(r'^admin/', include(admin.site.urls)),</code></pre>

*Fire up the server, and log in at http://localhost:8000/admin/*

<pre><code>$ python manage.py runserver</code></pre>

*Add your app to the admin. create a file called admin.py in your project (make joke about conventions), and add:*

<pre><code>from polls.models import Project
from django.contrib import admin

admin.site.register(Project)</code></pre>

*Add vote to the admin.py file so we can see associations*

<pre><code>from polls.models import Vote
admin.site.register(Vote)</code></pre>

*Configure your templates and dump the urls for our app into urls.py*

First add this to settings.py

<pre><code>import os
settings_dir = os.path.dirname(__file__)
STATIC_DOC_ROOT = os.path.join(settings_dir, 'media')
TEMPLATE_DIRS = (
    os.path.join(settings_dir, 'templates'),
)
</code></pre>

Then replace all of urls.py with the following

<pre><code>from django.conf.urls.defaults import *
from django.conf import settings
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    (r'^admin/', include(admin.site.urls)),
    (r'^polls/$', 'polls.views.index'),
    (r'^polls/(?P<poll_id>\d+)/$', 'polls.views.detail'),
    (r'^polls/(?P<poll_id>\d+)/vote/$', 'polls.views.vote'),
    (r'^polls/(?P<poll_id>\d+)/data.xml$', 'polls.views.data'),
    (r'^crossdomain.xml$', 'polls.views.crossdomain'),
    (r'^local-media/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_DOC_ROOT }),
)</code></pre>

*Create a view. in views.py*

<pre><code>from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world. You're at the poll index.")</code></pre>

*Add a new method to your views.py, to see how django passes parameters*

<pre><code>def detail(request, poll_id):
    return HttpResponse("You're looking at poll %s." % poll_id)</code></pre>

*Add a bunch of stuff up at the top of views.py we will need later*

<pre><code>from django.shortcuts import get_object_or_404, render_to_response
from polls.models import Project, Vote
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from django.db.models import Sum</code></pre>

*In our views.py, let's change our index view to pull some real data*

<pre><code>def index(request):
    projects = Project.objects.all().order_by('-pub_date')[:5]
    return render_to_response('polls/index.html', {'projects': projects})</code></pre>

*Create an index.html file*

<pre><code>{% if projects %}
    <ul>
    {% for project in projects %}
        <li><a href="/polls/{{ project.id }}/">{{ project.title }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No projects are available.</p>
{% endif %}</code></pre>

*Tweak our details method in views.py*

<pre><code>def detail(request, poll_id):
    p = Project.objects.get(pk=poll_id)
    total = p.vote_set.count()
    return render_to_response('polls/detail.html', {'project': p, 'vote_total': total, })</code></pre>

*Add a votes method to views.py*

<pre><code>def vote(request, poll_id):
    p = get_object_or_404(Project, pk=poll_id)
    v = p.vote_set.create(choice = request.POST['data'])
    v.save()
    return HttpResponse(status=200)</code></pre>

*Add a data method to views.py*

<pre><code>def data(request, poll_id):
    p = Project.objects.get(pk=poll_id)
    total = p.vote_set.aggregate(Sum('choice'))
    return render_to_response('polls/data.xml', {'project': p, 'vote_total': total['choice__sum'], }, mimetype="text/xml")</code></pre>

*Create a data.xml file*

<pre><code><?xml version="1.0" encoding="UTF-8"?>
<results>
<project>{{ project }}</project>
<totals>{{ vote_total }}</totals>
</results></code></pre>

*Create a crossdomain.xml method*

<pre><code>def crossdomain(request):
    return HttpResponse('<?xml version=\"1.0\"?><cross-domain-policy><allow-access-from domain=\"*\" /></cross-domain-policy>', mimetype="text/xml")</code></pre>

*Create a detail.html template where it all comes together*
<pre>&lt;div align=&quot;center&quot; class=&quot;left&quot;&gt;
    &lt;object type=&quot;application/x-shockwave-flash&quot; data=&quot;/local-media/voteinator.swf&quot; width=&quot;592&quot; height=&quot;333&quot;&gt;
        &lt;param name=&quot;movie&quot; value=&quot;/local-media/voteinator.swf&quot;/&gt;
        &lt;param name=&quot;FlashVars&quot; value=&quot;xml_path=http://localhost:8000/polls/{{ project.id }}/data.xml&amp;post_path=http://localhost:8000/polls/{{ project.id }}/vote/&quot;/&gt;
        &lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot;/&gt;
        &lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;
        &lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;
        &lt;param name=&quot;wmode&quot; value=&quot;opaque&quot;/&gt;
        &lt;embed src=&quot;/local-media/voteinator.swf&quot; FlashVars=&quot;xml_path=http://localhost:8000/polls/{{ project.id }}/data.xml&amp;post_path=http://localhost:8000/polls/{{ project.id }}/vote/&quot; bgcolor=&quot;#FFFFFF&quot; width=&quot;592&quot; height=&quot;333&quot; wmode=&quot;opaque&quot; allowScriptAccess=&quot;always&quot; allowFullScreen=&quot;true&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/embed&gt;
    &lt;/object&gt;
&lt;/div&gt;
</pre>

*Download votinator.swf and put in in the "media" directory*
<pre><code>https://github.com/palewire/nicar2011/blob/master/nicar2011/media/voteinator.swf</code></pre>

*Extra credit... it votes up, but not down. how to fix?*

<pre><code>def vote(request, poll_id):
    p = get_object_or_404(Project, pk=poll_id)
    if request.POST['data'] == "0":
        value = -1
    else:
        value = 1
    v = p.vote_set.create(choice = value)
    v.save()
    return HttpResponse(status=200)</code></pre>

